---
- name: print debug var of namespace
  debug:
    var: current_namespace
  when: playbook_debug

- name: Check if Prometheus is already deployed
  k8s_facts:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    api_version: "{{ cluster_prometheus_apiGroup }}/v1"
    kind: Prometheus
    namespace: '{{ current_namespace.metadata.name }}'
  register: prometheus_deployment

- debug:
    msg: '{{ prometheus_deployment }}'
  when: playbook_debug

- name: Deploying Prometheus in namespace
  block:
    - name: "Prometheus Deployment: deploy service account"
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        api_version: v1
        name: '{{ cluster_prometheus_namespace_serviceAccount }}'
        kind: ServiceAccount
        namespace: '{{ current_namespace.metadata.name }}'
        definition:
          metadata:
            annotations:
               serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"prometheus"}}'

    - name: "Prometheus Deployment: create clusterrolebinding"
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        definition:
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRoleBinding
          metadata:
            name: '{{ cluster_prometheus_namespace_serviceAccount }}'
            labels:
              app-monitor: '{{ cluster_prometheus_custom_label }}'
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: '{{ cluster_prometheus_namespace_serviceAccount }}'
          subjects:
          - kind: ServiceAccount
            name: '{{ cluster_prometheus_namespace_serviceAccount }}'
            namespace: '{{ current_namespace.metadata.name }}'

    - name: create service for prometheus
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: prometheus
            namespace: '{{ current_namespace.metadata.name }}'
            annotations:
              service.alpha.openshift.io/serving-cert-secret-name: prometheus-tls
            labels:
            #  name: '{{ cluster_prometheus_namespace_serviceAccount }}'
              app-monitor: monitor
          spec:
            ports:
              - name: web
                port: 9091
                protocol: TCP
                targetPort: web
            selector:
              prometheus: '{{ cluster_prometheus_namespace_serviceAccount }}'

    - name: Create route for prometheus
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: prometheus
            namespace: '{{ current_namespace.metadata.name }}'
          spec:
            port:
              targetPort: web
            tls:
              termination: reencrypt
            to:
              kind: Service
              name: prometheus
              weight: 100
            wildcardPolicy: None

    - name: Generate session_secret
      set_fact:
        session_secret: "{{ lookup('password', '/tmp/session_secret length=43 chars=ascii_letters,digits') }}"

    - name: Create prometheus session_secret
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: prometheus-proxy
            namespace: '{{ current_namespace.metadata.name }}'
          stringData:
            session_secret: "{{ session_secret }}"

    - name: Generate session secret for prometheus
      htpasswd:
        path: "{{ mktemp.stdout }}/prometheus.htpasswd"
        name: internal
        password: '{{ session_secret }}'
        crypt_scheme: ldap_sha1

    - name: Create prometheus htpasswd auth secret
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: prometheus-htpasswd
            namespace: '{{ current_namespace.metadata.name }}'
          stringData:
            auth: "{{ lookup('file', '{{ mktemp.stdout }}/prometheus.htpasswd') }}"

    - name: "Create bucket-config secret"
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: thanos-bucket-config
            namespace: '{{ current_namespace.metadata.name }}'
          stringData:
            thanos.yml: "{{ lookup('file', '{{ mktemp.stdout }}/bucket-config.yml') }}"

    - name: "Prometheus Deployment: template deployment"
      template:
        src: "{{ item }}.j2"
        dest: "{{ mktemp.stdout }}/{{ item }}"
      loop:
        - "prometheus.yml"

    - name: "Prometheus Deployment: create prometheus CRD deployment"
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        src: "{{ mktemp.stdout }}/prometheus.yml"

    - name: "Grafana Deployment: create grafana service account"
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        api_version: v1
        name: '{{ cluster_prometheus_grafana_serviceAccount }}'
        kind: ServiceAccount
        namespace: '{{ current_namespace.metadata.name }}'
        definition:
          metadata:
            annotations:
               serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana"}}'

    - name: "Grafana Deployment: set clusterrolebinding for grafana service account"
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRoleBinding
          metadata:
            name: '{{ cluster_prometheus_grafana_serviceAccount }}'
            labels:
              app-monitor: '{{ cluster_prometheus_custom_label }}'
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: grafana
          subjects:
            - kind: ServiceAccount
              name: '{{ cluster_prometheus_grafana_serviceAccount }}'
              namespace: '{{ current_namespace.metadata.name }}'

    - name: Create route for grafana
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: grafana
            namespace: '{{ current_namespace.metadata.name }}'
          spec:
            port:
              targetPort: https
            tls:
              termination: reencrypt
            to:
              kind: Service
              name: grafana
              weight: 100
            wildcardPolicy: None

    - name: create service for grafana
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: grafana
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/scheme: https
              service.alpha.openshift.io/serving-cert-secret-name: grafana-tls
            namespace: '{{ current_namespace.metadata.name }}'
            labels:
              name: grafana
          spec:
            ports:
              - name: https
                port: '{{ cluster_prometheus_grafana_port }}'
                protocol: TCP
                targetPort: https
            selector:
              app: grafana

    - name: Create grafana session_secret
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: grafana-proxy
            namespace: '{{ current_namespace.metadata.name }}'
          stringData:
            session_secret: "{{ lookup('password', '/tmp/session_secret length=43 chars=ascii_letters,digits') }}"


    - name: "Grafana Deployment: create grafana pvc"
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ cluster_prometheus_grafana_serviceAccount }}-pvc"
            labels:
              app: '{{ cluster_prometheus_grafana_serviceAccount }}'
              app-monitor: '{{ cluster_prometheus_custom_label }}'
            namespace: '{{ current_namespace.metadata.name }}'
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
      when: cluster_prometheus_grafana_storage_type == 'pvc'

    - name: "Grafana Deployment: template deployment and grafana-config"
      template:
        src: "{{ item }}.j2"
        dest: "{{ mktemp.stdout }}/{{ item }}"
      loop:
        - "grafana.yml"
        - "grafana-config.yml"
        - "grafana-datasources.yml"

    - name: create grafana-config configmap
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            namespace: '{{ current_namespace.metadata.name }}'
            name: grafana-config
          data:
            grafana.ini: "{{ lookup('file', '{{ mktemp.stdout }}/grafana-config.yml') }}"

    - name: Create grafana datasource secret
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: grafana-datasources
            namespace: '{{ current_namespace.metadata.name }}'
          stringData:
            prometheus.yaml: "{{ lookup('file', '{{ mktemp.stdout }}/grafana-datasources.yml') }}"

    - name: "Grafana Deployment: create grafana deployment"
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        src: "{{ mktemp.stdout }}/grafana.yml"

  when: prometheus_deployment.resources[0] is not defined

- name: "Pushgateway: template deployment"
  template:
    src: "pushgateway.yml.j2"
    dest: "{{ mktemp.stdout }}/pushgateway.yml"

- name: "Pushgateway: create pushgateway Deployment"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/pushgateway.yml"

- name: create service for pushgateway
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: prometheus-pushgateway
        namespace: '{{ current_namespace.metadata.name }}'
        labels:
          name: pushgateway
      spec:
        ports:
          - name: web
            port: 9091
            protocol: TCP
            targetPort: http
        selector:
          name: pushgateway

- debug:
    msg: "Prometheus is already deployed in namespace"
  when:  prometheus_deployment.resources[0] is defined