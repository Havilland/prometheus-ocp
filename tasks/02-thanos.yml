---
- name: "Deploy Minio statefulset service"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: minio
        namespace: '{{ cluster_prometheus_namespace }}'
        labels:
          app: minio
      spec:
        clusterIP: None
        ports:
          - port: 9000
            name: minio
        selector:
          app: minio
  when: cluster_thanos_minio_distributed

- name: "Deploy minio-service"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: minio-service
        namespace: '{{ cluster_prometheus_namespace }}'
      spec:
        type: LoadBalancer
        ports:
          - port: 9000
            targetPort: 9000
            protocol: TCP
        selector:
          component: minio

- name: "Create thanos-peers headless service"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: thanos-peers
        namespace: '{{ cluster_prometheus_namespace }}'
      spec:
        type: ClusterIP
        clusterIP: None
        ports:
          - name: cluster
            port: 10900
            targetPort: cluster
        selector:
          thanos-peer: "true"

- name: "Create thanos-query headless service"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: thanos-query
        namespace: '{{ cluster_prometheus_namespace }}'
        labels:
          component: thanos-query
      spec:
        type: NodePort
        externalTrafficPolicy: Cluster
        ports:
          - name: http-query
            port: 9090
            protocol: TCP
            targetPort: http
        selector:
          component: thanos-query

- name: "Create route to thanos-query"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Route
      metadata:
        name: thanos-query
        namespace: '{{ cluster_prometheus_namespace }}'
        labels:
          route: thanos-query
      spec:
        to:
          kind: Service
          name: thanos-query

- name: "Create route to minio-service"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Route
      metadata:
        name: minio-service
        namespace: '{{ cluster_prometheus_namespace }}'
        labels:
          route: minio-service
      spec:
        to:
          kind: Service
          name: minio-service

- name: "Create yml files from templates"
  template:
    src: "{{ item }}.j2"
    dest: "{{ mktemp.stdout }}/{{ item }}"
  loop:
    - "bucket-config.yml"
    - "minio-deployment.yml"
    - "thanos-query.yml"
    - "thanos-store.yml"
    - "thanos-compactor.yml"

- name: "Deploy minio"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/minio-deployment.yml"
  register: minio_deploy

- name: "Wait 120 seconds for minio deployment"
  pause:
    seconds: 120
  when: minio_deploy.changed and cluster_thanos_minio_distributed

- name: "Get minio route"
  k8s_facts:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    api_version: v1
    kind: Route
    namespace: '{{ cluster_prometheus_namespace }}'
    label_selectors:
      - route = minio-service
  register: minio_route

- name: "Configure minio client"
  command: /root/mc config host add minio http://{{ minio_route | json_query('resources[*].spec.host') | join('') }} {{ cluster_thanos_store_access_key }} {{ cluster_thanos_store_secret_key }}
  register: task_result
  until: task_result.rc == 0
  retries: 10
  delay: 10
  ignore_errors: yes

- name: "Check if bucket exists"
  command: /root/mc ls minio/{{ cluster_thanos_store_bucket }}
  ignore_errors: yes
  register: bucket_result

- name: "Create bucket"
  command: /root/mc mb minio/{{ cluster_thanos_store_bucket }}
  when: bucket_result.rc != 0

- name: "Create bucket-config secret"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: bucket-config
        namespace: '{{ cluster_prometheus_namespace }}'
      stringData:
        thanos.yml: "{{ lookup('file', '{{ mktemp.stdout }}/bucket-config.yml') }}"

- name: "Deploy thanos-store statefulset"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/thanos-store.yml"

- name: "Deploy thanos-compactor statefulset"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/thanos-compactor.yml"

- name: "Deploy thanos-query"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/thanos-query.yml"

- name: "Grafana Deployment: create grafana service account"
    k8s:
      verify_ssl: "{{ k8s_auth_verify_ssl }}"
      state: present
      api_version: v1
      name: '{{ cluster_prometheus_grafana_serviceAccount }}'
      kind: ServiceAccount
      namespace: '{{ cluster_prometheus_namespace }}'
      definition:
        metadata:
          annotations:
            serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana"}}'

- name: "Grafana Deployment: set clusterrolebinding for grafana service account"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: '{{ cluster_prometheus_grafana_serviceAccount }}-{{ cluster_prometheus_namespace }}'
        labels:
          app-monitor: '{{ cluster_prometheus_custom_label }}'
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: grafana
      subjects:
        - kind: ServiceAccount
          name: '{{ cluster_prometheus_grafana_serviceAccount }}'
          namespace: '{{ cluster_prometheus_namespace }}'

- name: Create route for grafana
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: grafana
        namespace: '{{ cluster_prometheus_namespace }}'
      spec:
        port:
          targetPort: https
        tls:
          termination: reencrypt
        to:
          kind: Service
          name: grafana
          weight: 100
        wildcardPolicy: None

- name: create service for grafana
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: grafana
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/scheme: https
          service.alpha.openshift.io/serving-cert-secret-name: grafana-tls
        namespace: '{{ cluster_prometheus_namespace }}'
        labels:
          name: grafana
      spec:
        ports:
          - name: https
            port: '{{ cluster_prometheus_grafana_port }}'
            protocol: TCP
            targetPort: https
        selector:
          app: grafana

- name: Create grafana session_secret
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: grafana-proxy
        namespace: '{{ cluster_prometheus_namespace }}'
      stringData:
        session_secret: "{{ lookup('password', '/tmp/session_secret length=43 chars=ascii_letters,digits') }}"


- name: "Grafana Deployment: create grafana pvc"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ cluster_prometheus_grafana_serviceAccount }}-pvc"
        labels:
          app: '{{ cluster_prometheus_grafana_serviceAccount }}'
          app-monitor: '{{ cluster_prometheus_custom_label }}'
        namespace: '{{ cluster_prometheus_namespace }}'
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  when: cluster_prometheus_grafana_storage_type == 'pvc'

- name: Reassign Namespace Variable for templating
  set_fact:
    current_namespace:
      metadata:
        name: {{ cluster_prometheus_namespace }}

- name: "Grafana Deployment: template deployment and grafana-config"
  template:
    src: "{{ item }}.j2"
    dest: "{{ mktemp.stdout }}/{{ item }}"
  loop:
    - "grafana.yml"
    - "grafana-config.yml"
    - "grafana-thanos-datasource.yml"

- name: create grafana-config configmap
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: '{{ cluster_prometheus_namespace }}'
        name: grafana-config
      data:
        grafana.ini: "{{ lookup('file', '{{ mktemp.stdout }}/grafana-config.yml') }}"

- name: Create grafana datasource secret
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: grafana-datasources
        namespace: '{{ cluster_prometheus_namespace }}'
      stringData:
        prometheus.yaml: "{{ lookup('file', '{{ mktemp.stdout }}/grafana-thanos-datasource.yml') }}"

- name: "Grafana Deployment: create grafana deployment"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/grafana.yml"