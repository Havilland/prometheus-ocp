---
- name: "Grafana Deployment: create grafana service account"
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    api_version: v1
    name: '{{ cluster_prometheus_grafana_serviceAccount }}'
    kind: ServiceAccount
    namespace: '{{ item.metadata.name }}'

- name: "Grafana Deployment: set clusterrolebinding for grafana service account"
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: '{{ cluster_prometheus_grafana_serviceAccount }}'
        labels:
          app-monitor: '{{ cluster_prometheus_custom_label }}'
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: '{{ cluster_prometheus_grafana_serviceAccount }}'
      subjects:
        - kind: ServiceAccount
          name: '{{ cluster_prometheus_grafana_serviceAccount }}'
          namespace: '{{ item.metadata.name }}'

- name: create service/route for grafana
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: grafana
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/scheme: https
          service.alpha.openshift.io/serving-cert-secret-name: grafana-tls
        namespace: '{{ item.metadata.name }}'
        labels:
#            metrics-infra: grafana
          name: grafana
      spec:
        ports:
          - name: grafana
            protocol: TCP
            targetPort: 3000
        selector:
          app: grafana

- name:
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    definition:
      apiVersion: v1
        kind: Secret
        metadata:
          name: grafana-proxy
          namespace: '{{ item.metadata.name }}'
        stringData:
          session_secret: "{{ lookup('password', '/tmp/session_secret length=43 chars=ascii_letters,digits) }}="


- name: "Grafana Deployment: create grafana pvc"
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ cluster_prometheus_grafana_serviceAccount }}-pvc"
        labels:
          app: '{{ cluster_prometheus_grafana_serviceAccount }}'
          app-monitor: '{{ cluster_prometheus_custom_label }}'
        namespace: '{{ item.metadata.name }}'
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

- name: "Grafana Deployment: template deployment and grafana-config"
  template:
    src: "{{ item }}.j2"
    dest: "{{ mktemp.stdout }}/{{ item }}"
  with_items:
    - "grafana.yml"
    - "grafana-config.yml"

- name: "Grafana Deployment: create grafana-config configmap"
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    src: {{ mktemp.stdout }}/grafana.yml

#- name: create grafana deployment
#  k8s:
#    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
#    state: present

#- name: get prometheus service
#  k8s:
#    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
#    state: present

#- name: create grafana datasource (uri call to grafana api)

#- name: create example dashboard