---
- name: "Base Installation: create Namespace if not present"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    name: '{{ cluster_prometheus_namespace }}'
    api_version: v1
    kind: Namespace

- name: "Base Installation: create clusterrole for prometheus operator"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: '{{ cluster_prometheus_namespace }}'
      rules:
      - apiGroups:
        - apiextensions.k8s.io
        resources:
        - customresourcedefinitions
        verbs:
        - '*'
      - apiGroups:
        - '{{ cluster_prometheus_apiGroup }}'
        resources:
        - alertmanagers
        - prometheuses
        - prometheuses/finalizers
        - alertmanagers/finalizers
        - servicemonitors
        - prometheusrules
        verbs:
        - '*'
      - apiGroups:
        - apps
        resources:
        - statefulsets
        verbs:
        - '*'
      - apiGroups:
        - ""
        resources:
        - configmaps
        - secrets
        verbs:
        - '*'
      - apiGroups:
        - ""
        resources:
        - pods
        verbs:
        - list
        - delete
      - apiGroups:
        - ""
        resources:
        - services
        - endpoints
        verbs:
        - get
        - create
        - update
      - apiGroups:
        - ""
        resources:
        - nodes
        verbs:
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - namespaces
        verbs:
        - get
        - list
        - watch

- name: "Base Installation: create service account for custom-prometheus-operator"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    name: '{{ cluster_prometheus_operator_serviceAccount }}'
    api_version: v1
    kind: ServiceAccount
    namespace: '{{ cluster_prometheus_namespace }}'

- name: create clusterrolebinding
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: "{{ cluster_prometheus_namespace }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: "{{ cluster_prometheus_namespace }}"
      subjects:
      - kind: ServiceAccount
        name: "{{ cluster_prometheus_operator_serviceAccount }}"
        namespace: "{{ cluster_prometheus_namespace }}"

- name: "Create prometheus-operator.yml from template"
  template:
    src: "{{ item }}.j2"
    dest: "{{ mktemp.stdout }}/{{ item }}"
  loop:
    - "prometheus-operator.yml"

- name: "Deploy prometheus-operator"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/prometheus-operator.yml"

- name: "Base Installation: Create app-prometheus clusterrole"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRole
      metadata:
        name: "{{ cluster_prometheus_namespace_serviceAccount }}"
      rules:
        - apiGroups:
            - authentication.k8s.io
          attributeRestrictions: null
          resources:
            - tokenreviews
          verbs:
            - create
        - apiGroups:
            - authorization.k8s.io
          attributeRestrictions: null
          resources:
            - subjectaccessreviews
          verbs:
            - create
        - apiGroups: [""]
          resources:
          - nodes
          - services
          - endpoints
          - pods
          verbs: ["get", "list", "watch"]
        - apiGroups: [""]
          resources:
          - configmaps
          verbs: ["get"]
        - nonResourceURLs: ["/metrics"]
          verbs: ["get"]

- name: "Base Installation: Create clusterrole for grafana"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: authorization.openshift.io/v1
      kind: ClusterRole
      metadata:
        name: grafana
      rules:
        - apiGroups:
            - authentication.k8s.io
          attributeRestrictions: null
          resources:
            - tokenreviews
          verbs:
            - create
        - apiGroups:
            - authorization.k8s.io
          attributeRestrictions: null
          resources:
            - subjectaccessreviews
          verbs:
            - create

- name: "Create Networkpolicy if necessary"
  block:

    - name: generate networkpolicy yaml from template
      template:
        src: thanos-networkpolicy.yml.j2
        dest: "{{ mktemp.stdout }}/thanos-networkpolicy.yml"

    - name: create clusternetwork policy
      k8s:
        verify_ssl: "{{ k8s_auth_verify_ssl }}"
        state: present
        src: "{{ mktemp.stdout }}/thanos-networkpolicy.yml"

  when: sdn_plugin_name == "redhat/openshift-ovs-networkpolicy" and cluster_thanos_aggregation