---
- name: print debug var of namespace
  debug:
    var: current_namespace

- name: "Prometheus Deployment: deploy service account"
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    api_version: v1
    kind: ServiceAccount
    name: '{{ cluster_prometheus_namespace_serviceAccount }}'
    namespace: '{{ current_namespace.metadata.name }}'
    definition:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.prrimary: >-
          {"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"prometheus"}}
        
- name: "Prometheus Deployment: create clusterrolebinding"
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: '{{ cluster_prometheus_namespace_serviceAccount }}'
        labels:
          app-monitor: '{{ cluster_prometheus_custom_label }}'
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: '{{ cluster_prometheus_namespace_serviceAccount }}'
      subjects:
      - kind: ServiceAccount
        name: '{{ cluster_prometheus_namespace_serviceAccount }}'
        namespace: '{{ current_namespace.metadata.name }}'

- name: create service for prometheus
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: prometheus
        annotations:
          service.alpha.openshift.io/serving-cert-secret-name: prometheus-tls
        namespace: '{{ current_namespace.metadata.name }}'
        labels:
          name: '{{ cluster_prometheus_namespace_serviceAccount }}'
      spec:
        ports:
          - name: web
            port: 9091
            protocol: TCP
            targetPort: web
        selector:
          app: '{{ cluster_prometheus_namespace_serviceAccount }}'

- name: Create route for grafana
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: prometheus
        namespace: '{{ current_namespace.metadata.name }}'
      spec:
        port:
          targetPort: https
        tls:
          termination: reencrypt
        to:
          kind: Service
          name: prometheus
          weight: 100
        wildcardPolicy: None

- name: Create prometheus session_secret
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: prometheus-proxy
        namespace: '{{ current_namespace.metadata.name }}'
      stringData:
        session_secret: "{{ lookup('password', '/tmp/session_secret length=43 chars=ascii_letters,digits') }}"

- name: "Prometheus Deployment: template deployment"
  template:
    src: "{{ item }}.j2"
    dest: "{{ mktemp.stdout }}/{{ item }}"
  loop:
    - "prometheus.yml"

- name: "Prometheus Deployment: create prometheus CRD deployment"
  k8s:
    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
    state: present
    src: "{{ mktemp.stdout }}/prometheus.yml"

#- name: "Prometheus Deployment: Deploy prometheus custom resource to namespace"
#  k8s:
#    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
#    definition:
#      apiVersion: '{{ cluster_prometheus_apiGroup }}/v1'
#      kind: Prometheus
#      metadata:
#        name: '{{ cluster_prometheus_namespace_serviceAccount }}'
#        namespace: '{{ current_namespace.metadata.name }}'
#        labels:
#          app-monitor: '{{ cluster_prometheus_custom_label }}'
#      labels:
#        app-prometheus: prometheus
#      spec:
#        replicas: 2
#        serviceAccountName: '{{ cluster_prometheus_namespace_serviceAccount }}'
#        serviceMonitorSelector:
#          matchLabels:
#            team: frontend


#- name: deploy pushgateway
#  k8s:
#    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
#    api_version:
#    
#- name: deploy pushgateway servicemonitor
#  k8s:
#    verify_ssl: "{{ lookup('env','K8S_AUTH_VERIFY_SSL') }}"
#    api_version:

    
