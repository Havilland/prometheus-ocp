---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: {{ current_namespace.metadata.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      name: grafana
    spec:
      serviceAccountName: {{ cluster_prometheus_grafana_serviceAccount }}
      containers:
      - name: oauth-proxy
        image: "{{ cluster_prometheus_oauth_image }}"
        imagePullPolicy: IfNotPresent
        resources:
          requests:
{% if cluster_prometheus_oauth_proxy_memory_requests is defined and cluster_prometheus_oauth_proxy_memory_requests is not none %}
            memory: "{{ cluster_prometheus_oauth_proxy_memory_requests }}"
{% endif %}
{% if cluster_prometheus_oauth_proxy_cpu_requests is defined and cluster_prometheus_oauth_proxy_cpu_requests is not none %}
            cpu: "{{ cluster_prometheus_oauth_proxy_cpu_requests }}"
{% endif %}
          limits:
{% if cluster_prometheus_oauth_proxy_memory_limit is defined and cluster_prometheus_oauth_proxy_memory_limit is not none %}
            memory: "{{ cluster_prometheus_oauth_proxy_memory_limit }}"
{% endif %}
{% if cluster_prometheus_oauth_proxy_cpu_limit is defined and cluster_prometheus_oauth_proxy_cpu_limit is not none %}
            cpu: "{{ cluster_prometheus_oauth_proxy_cpu_limit }}"
{% endif %}
        ports:
        - containerPort: {{ cluster_prometheus_grafana_port }}
          name: web
        args:
        - -https-address=:{{ cluster_prometheus_grafana_service_port }}
        - -http-address=
        - -email-domain=*
        - -client-id=system:serviceaccount:{{ current_namespace.metadata.name }}:{{ cluster_prometheus_grafana_serviceAccount }}
        - -upstream=http://localhost:{{ cluster_prometheus_grafana_service_port }}
        - -provider=openshift
#       - '-openshift-delegate-urls={"/api/datasources": {"resource": "namespace", "verb": "get", "resourceName": "{{ current_namespace.metadata.name }}", "namespace": "{{ current_namespace.metadata.name }}"}}'
        - '-openshift-sar={"namespace": "{{ current_namespace.metadata.name }}", "verb": "list", "resource": "services"}'
        - -tls-cert=/etc/tls/private/tls.crt
        - -tls-key=/etc/tls/private/tls.key
        - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
        - -cookie-secret-file=/etc/proxy/secrets/session_secret
        - '-openshift-service-account=grafana'
        - '-openshift-ca=/etc/pki/tls/cert.pem'
        - '-openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
        - -skip-auth-regex=^/metrics,/api/datasources,/api/dashboards
        volumeMounts:
        - mountPath: /etc/tls/private
          name: grafana-tls-secret
        - mountPath: /etc/proxy/secrets
          name: grafana-proxy-secrets

      - name: grafana
        image: "{{ cluster_prometheus_grafana_image }}"
        imagePullPolicy: IfNotPresent
        resources:
          requests:
{% if cluster_prometheus_grafana_memory_requests is defined and cluster_prometheus_grafana_memory_requests is not none %}
            memory: "{{ cluster_prometheus_grafana_memory_requests }}"
{% endif %}
{% if cluster_prometheus_grafana_cpu_requests is defined and cluster_prometheus_grafana_cpu_requests is not none %}
            cpu: "{{ cluster_prometheus_grafana_cpu_requests }}"
{% endif %}
          limits:
{% if cluster_prometheus_grafana_memory_limit is defined and cluster_prometheus_grafana_memory_limit is not none %}
            memory: "{{ cluster_prometheus_grafana_memory_limit }}"
{% endif %}
{% if cluster_prometheus_grafana_cpu_limit is defined and cluster_prometheus_grafana_cpu_limit is not none %}
            cpu: "{{ cluster_prometheus_grafana_cpu_limit }}"
{% endif %}
        ports:
        - name: grafana-http
          containerPort: {{ cluster_prometheus_grafana_port }}
        volumeMounts:
        - mountPath: "/var/lib/grafana"
          name: grafana-data
        - mountPath: "/etc/grafana"
          name: grafana-config
        - mountPath: /etc/tls/private
          name: grafana-tls-secret
        - mountPath: /etc/proxy/secrets
          name: grafana-proxy-secrets
        args:
          - '-config=/etc/grafana/grafana.ini'
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-proxy-secrets
        secret:
          secretName: grafana-proxy
      - name: grafana-tls-secret
        secret:
          secretName: grafana-tls
      - name: grafana-data
{% if cluster_prometheus_grafana_storage_type == 'pvc' %}
        persistentVolumeClaim:
          claimName: {{ cluster_prometheus_grafana_serviceAccount }}-pvc
{% else %}
        emptydir: {}
{% endif %}